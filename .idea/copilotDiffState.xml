<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/MainActivity.kt" />
              <option name="originalContent" value="&#10;&#10;    // ...existing code...&#10;    // 他ボタンの有効/無効制御&#10;    // sync_buttonは常に有効化すること&#10;    // ...existing code...&#10;}&#10;&#10;" />
              <option name="updatedContent" value="&#10;&#10;    // ...existing code...&#10;    // 他ボタンの有効/無効制御&#10;    // sync_buttonは常に有効化すること&#10;    // ...existing code...&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/build.gradle">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle" />
              <option name="originalContent" value="plugins {&#10;    id 'com.android.application'&#10;    id 'kotlin-android'&#10;    id 'kotlin-kapt'&#10;}&#10;&#10;android {&#10;    compileSdk 33&#10;&#10;    defaultConfig {&#10;        applicationId &quot;com.example.myapp&quot;&#10;        minSdk 21&#10;        targetSdk 33&#10;        versionCode 1&#10;        versionName &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            minifyEnabled false&#10;            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility JavaVersion.VERSION_1_8&#10;        targetCompatibility JavaVersion.VERSION_1_8&#10;    }&#10;&#10;    kotlinOptions {&#10;        jvmTarget = '1.8'&#10;    }&#10;&#10;    packagingOptions {&#10;        resources {&#10;            excludes += '/META-INF/*'&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // ZXing Android Embedded (QRコード)&#10;    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'&#10;&#10;    // Retrofit2 + OkHttp3 (HTTP通信)&#10;    implementation 'com.squareup.retrofit2:retrofit:2.11.0'&#10;    implementation 'com.squareup.retrofit2:converter-gson:2.11.0'&#10;    implementation 'com.squareup.okhttp3:okhttp:4.12.0'&#10;    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'&#10;&#10;    // Room Database&#10;    implementation &quot;androidx.room:room-runtime:2.6.1&quot;&#10;    kapt &quot;androidx.room:room-compiler:2.6.1&quot;&#10;    implementation &quot;androidx.room:room-ktx:2.6.1&quot;&#10;&#10;    // Material Design Components&#10;    implementation 'com.google.android.material:material:1.12.0'&#10;&#10;    // AndroidX&#10;    implementation 'androidx.recyclerview:recyclerview:1.3.2'&#10;    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'&#10;    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.1'&#10;    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.8.1'&#10;&#10;    // Kotlin Coroutines (Room/Retrofit連携用)&#10;    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1'&#10;}&#10;" />
              <option name="updatedContent" value="// このファイルはKotlin DSL移行のため空にしています。" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/bundlemaker/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/bundlemaker/MainActivity.kt" />
              <option name="originalContent" value="package com.example.bundlemaker&#10;&#10;import android.app.AlertDialog&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.View&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ImageButton&#10;import android.widget.ProgressBar&#10;import android.widget.Toast&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.recyclerview.widget.RecyclerView&#10;import androidx.room.Room&#10;import com.example.bundlemaker.ConfirmActivity&#10;import com.example.bundlemaker.adapter.ProductAdapter&#10;import com.example.bundlemaker.model.AppDatabase&#10;import com.example.bundlemaker.model.LocalProduct&#10;import com.example.bundlemaker.model.Product&#10;import com.example.bundlemaker.network.ProductApiService&#10;import com.example.bundlemaker.network.ProductRequest&#10;import com.example.bundlemaker.network.ProductResponse&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;&#10;class MainActivity : AppCompatActivity() {&#10;&#10;    private lateinit var productSerialSearchBtn: Button&#10;    private lateinit var robotSerialEnterBtn: Button&#10;    private lateinit var controllerSerialEnterBtn: Button&#10;    private lateinit var commitBtn: Button&#10;    private lateinit var syncBtn: ImageButton&#10;    private lateinit var confirmBtn: Button&#10;    private lateinit var recyclerView: RecyclerView&#10;    private lateinit var adapter: ProductAdapter&#10;&#10;    private var currentProducts: MutableList&lt;Product&gt; = mutableListOf()&#10;    private var selectedRowIndex: Int = -1&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContentView(R.layout.activity_main)&#10;&#10;        productSerialSearchBtn = findViewById(R.id.product_serial_search_button)&#10;        robotSerialEnterBtn = findViewById(R.id.robot_serial_enter_button)&#10;        controllerSerialEnterBtn = findViewById(R.id.controller_serial_enter_button)&#10;        commitBtn = findViewById(R.id.commit_button)&#10;        syncBtn = findViewById(R.id.sync_button)&#10;        confirmBtn = findViewById(R.id.confirm_button)&#10;        recyclerView = findViewById(R.id.product_table)&#10;&#10;        adapter = ProductAdapter(currentProducts)&#10;        recyclerView.adapter = adapter&#10;&#10;        // ボタン初期状態&#10;        updateButtonState()&#10;&#10;        // 製品シリアル検索&#10;        productSerialSearchBtn.setOnClickListener {&#10;            showInputDialog(&quot;製造番号を入力してください&quot;) { serial -&gt;&#10;                if (serial.isNotBlank()) {&#10;                    lifecycleScope.launch {&#10;                        val db = Room.databaseBuilder(&#10;                            applicationContext,&#10;                            AppDatabase::class.java,&#10;                            &quot;local_products&quot;&#10;                        ).build()&#10;                        val localProduct = withContext(Dispatchers.IO) {&#10;                            db.localProductDao().getProductBySerial(serial)&#10;                        }&#10;                        val product = localProduct?.let { it.toProduct() } ?: Product(product_serial = serial)&#10;                        if (localProduct != null) {&#10;                            selectedRowIndex = currentProducts.indexOfFirst { p -&gt; p.product_serial == serial }&#10;                            if (selectedRowIndex == -1) {&#10;                                currentProducts.add(product)&#10;                                selectedRowIndex = currentProducts.size - 1&#10;                            }&#10;                            adapter.selectedPosition = selectedRowIndex&#10;                            adapter.notifyItemChanged(selectedRowIndex)&#10;                            Toast.makeText(this@MainActivity, &quot;製造番号が見つかりました&quot;, Toast.LENGTH_SHORT).show()&#10;                        } else {&#10;                            currentProducts.add(product)&#10;                            selectedRowIndex = currentProducts.size - 1&#10;                            adapter.selectedPosition = selectedRowIndex&#10;                            adapter.notifyItemInserted(selectedRowIndex)&#10;                            Toast.makeText(this@MainActivity, &quot;新規製造番号を追加しました&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                        updateButtonState()&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        robotSerialEnterBtn.setOnClickListener {&#10;            if (selectedRowIndex &gt;= 0) {&#10;                showInputDialog(&quot;ロボットシリアル番号を入力してください&quot;) { robotSerial -&gt;&#10;                    if (robotSerial.isNotBlank()) {&#10;                        val product = currentProducts[selectedRowIndex]&#10;                        product.robot_serial = robotSerial&#10;                        adapter.notifyItemChanged(selectedRowIndex)&#10;                        lifecycleScope.launch {&#10;                            val db = Room.databaseBuilder(&#10;                                applicationContext,&#10;                                AppDatabase::class.java,&#10;                                &quot;local_products&quot;&#10;                            ).build()&#10;                            withContext(Dispatchers.IO) {&#10;                                val localProduct = db.localProductDao().getProductBySerial(product.product_serial) ?: LocalProduct(&#10;                                    product_serial = product.product_serial,&#10;                                    robot_serial = robotSerial,&#10;                                    created_at = System.currentTimeMillis(),&#10;                                    updated_at = System.currentTimeMillis()&#10;                                )&#10;                                db.localProductDao().insert(localProduct)&#10;                            }&#10;                        }&#10;                        updateButtonState()&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        controllerSerialEnterBtn.setOnClickListener {&#10;            if (selectedRowIndex &gt;= 0) {&#10;                showInputDialog(&quot;コントローラシリアル番号を入力してください&quot;) { controlSerial -&gt;&#10;                    if (controlSerial.isNotBlank()) {&#10;                        val product = currentProducts[selectedRowIndex]&#10;                        product.control_serial = controlSerial&#10;                        adapter.notifyItemChanged(selectedRowIndex)&#10;                        lifecycleScope.launch {&#10;                            val db = Room.databaseBuilder(&#10;                                applicationContext,&#10;                                AppDatabase::class.java,&#10;                                &quot;local_products&quot;&#10;                            ).build()&#10;                            withContext(Dispatchers.IO) {&#10;                                val localProduct = db.localProductDao().getProductBySerial(product.product_serial) ?: LocalProduct(&#10;                                    product_serial = product.product_serial,&#10;                                    control_serial = controlSerial,&#10;                                    created_at = System.currentTimeMillis(),&#10;                                    updated_at = System.currentTimeMillis()&#10;                                )&#10;                                db.localProductDao().insert(localProduct)&#10;                            }&#10;                        }&#10;                        updateButtonState()&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        commitBtn.setOnClickListener {&#10;            if (selectedRowIndex &gt;= 0) {&#10;                val product = currentProducts[selectedRowIndex]&#10;                if (product.product_serial.isNotBlank() &amp;&amp;&#10;                    !product.robot_serial.isNullOrBlank() &amp;&amp;&#10;                    !product.control_serial.isNullOrBlank()&#10;                ) {&#10;                    product.updated_at = System.currentTimeMillis()&#10;                    adapter.notifyItemChanged(selectedRowIndex)&#10;                    lifecycleScope.launch {&#10;                        val db = Room.databaseBuilder(&#10;                            applicationContext,&#10;                            AppDatabase::class.java,&#10;                            &quot;local_products&quot;&#10;                        ).build()&#10;                        withContext(Dispatchers.IO) {&#10;                            val localProduct = LocalProduct(&#10;                                product_serial = product.product_serial,&#10;                                robot_serial = product.robot_serial ?: &quot;&quot;,&#10;                                control_serial = product.control_serial ?: &quot;&quot;,&#10;                                created_at = System.currentTimeMillis(),&#10;                                updated_at = System.currentTimeMillis(),&#10;                                sync_status = 1 // Mark as completed&#10;                            )&#10;                            db.localProductDao().insert(localProduct)&#10;                        }&#10;                    }&#10;                    Toast.makeText(this, &quot;レコードを確定しました&quot;, Toast.LENGTH_SHORT).show()&#10;                    // 新しい行の準備&#10;                    selectedRowIndex = -1&#10;                    adapter.selectedPosition = -1&#10;                    updateButtonState()&#10;                }&#10;            }&#10;        }&#10;&#10;        // 同期ボタン&#10;        syncBtn.isEnabled = true&#10;        confirmBtn.isEnabled = true&#10;&#10;        syncBtn.setOnClickListener {&#10;            lifecycleScope.launch {&#10;                sendCompletedRecordsToServer()&#10;                fetchIncompleteRecordsFromServer()&#10;                refreshProductList() // ←同期後に最新データを表示&#10;            }&#10;        }&#10;&#10;        confirmBtn.setOnClickListener {&#10;            lifecycleScope.launch {&#10;                val products = fetchAllRecordsFromServer()&#10;                // RecyclerViewにも表示（ConfirmActivityへ渡すだけでなく、画面にも反映したい場合）&#10;                currentProducts.clear()&#10;                currentProducts.addAll(products)&#10;                adapter.notifyDataSetChanged()&#10;                // ConfirmActivityへ遷移&#10;                val intent = Intent(this@MainActivity, ConfirmActivity::class.java)&#10;                intent.putExtra(&quot;products&quot;, ArrayList(products))&#10;                startActivity(intent)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun updateButtonState() {&#10;        productSerialSearchBtn.isEnabled = true&#10;        robotSerialEnterBtn.isEnabled = selectedRowIndex &gt;= 0 &amp;&amp; currentProducts[selectedRowIndex].product_serial.isNotBlank()&#10;        controllerSerialEnterBtn.isEnabled = selectedRowIndex &gt;= 0 &amp;&amp; !currentProducts[selectedRowIndex].robot_serial.isNullOrBlank()&#10;        commitBtn.isEnabled = selectedRowIndex &gt;= 0 &amp;&amp;&#10;                !currentProducts[selectedRowIndex].product_serial.isNullOrBlank() &amp;&amp;&#10;                !currentProducts[selectedRowIndex].robot_serial.isNullOrBlank() &amp;&amp;&#10;                !currentProducts[selectedRowIndex].control_serial.isNullOrBlank()&#10;    }&#10;&#10;    private fun showInputDialog(title: String, callback: (String) -&gt; Unit) {&#10;        val editText = EditText(this)&#10;        val dialog = android.app.AlertDialog.Builder(this)&#10;            .setTitle(title)&#10;            .setView(editText)&#10;            .setPositiveButton(&quot;OK&quot;) { _, _ -&gt;&#10;                callback(editText.text.toString())&#10;            }&#10;            .setNegativeButton(&quot;キャンセル&quot;, null)&#10;            .create()&#10;        dialog.show()&#10;    }&#10;&#10;    private suspend fun sendCompletedRecordsToServer() {&#10;        val db = Room.databaseBuilder(&#10;            applicationContext,&#10;            AppDatabase::class.java,&#10;            &quot;local_products&quot;&#10;        ).build()&#10;        val completed = withContext(Dispatchers.IO) {&#10;            db.localProductDao().getPending()&#10;                .filter {&#10;                    it.product_serial.isNotBlank() &amp;&amp;&#10;                    !it.robot_serial.isNullOrBlank() &amp;&amp;&#10;                    !it.control_serial.isNullOrBlank()&#10;                }&#10;        }&#10;        val retrofit = Retrofit.Builder()&#10;            .baseUrl(&quot;http://192.168.10.104:5000/&quot;)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;        val api = retrofit.create(ProductApiService::class.java)&#10;&#10;        for (localProduct in completed) {&#10;            try {&#10;                val request = ProductRequest(&#10;                    product_serial = localProduct.product_serial,&#10;                    robot_serial = localProduct.robot_serial,&#10;                    control_serial = localProduct.control_serial&#10;                )&#10;                Log.d(&quot;API&quot;, &quot;送信データ: $request&quot;)&#10;                val response = withContext(Dispatchers.IO) {&#10;                    try {&#10;                        api.postProduct(request)&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;API&quot;, &quot;API呼び出しエラー: ${e.message}&quot;)&#10;                        null&#10;                    }&#10;                }&#10;                response?.let { res -&gt;&#10;                    if (res.isSuccessful) {&#10;                        withContext(Dispatchers.IO) {&#10;                            db.localProductDao().updateSyncStatus(localProduct.product_serial, 1)&#10;                        }&#10;                    } else {&#10;                        val errorBody = res.errorBody()?.string()&#10;                        Log.e(&quot;API&quot;, &quot;送信失敗: $errorBody&quot;)&#10;                    }&#10;                } ?: run {&#10;                    Log.e(&quot;API&quot;, &quot;API呼び出しに失敗しました&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;API&quot;, &quot;送信例外: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    private suspend fun fetchIncompleteRecordsFromServer() {&#10;        val retrofit = Retrofit.Builder()&#10;            .baseUrl(&quot;http://192.168.10.104:5000/&quot;)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;        val api = retrofit.create(ProductApiService::class.java)&#10;        try {&#10;            val response = withContext(Dispatchers.IO) { api.getIncompleteProducts() }&#10;            if (response.isSuccessful) {&#10;                val incompleteList = response.body() ?: emptyList()&#10;                val db = Room.databaseBuilder(&#10;                    applicationContext,&#10;                    AppDatabase::class.java,&#10;                    &quot;local_products&quot;&#10;                ).build()&#10;                withContext(Dispatchers.IO) {&#10;                    for (prod in incompleteList) {&#10;                        db.localProductDao().insert(&#10;                            LocalProduct(&#10;                                product_serial = prod.product_serial,&#10;                                robot_serial = prod.robot_serial,&#10;                                control_serial = prod.control_serial,&#10;                                sales_id = prod.sales_id,&#10;                                created_at = prod.created_at ?: System.currentTimeMillis(),&#10;                                updated_at = prod.updated_at,&#10;                                sync_status = 0&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;            } else {&#10;                Log.e(&quot;API&quot;, &quot;未完成レコード取得失敗: ${response.errorBody()?.string()}&quot;)&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;API&quot;, &quot;未完成レコード取得例外: ${e.message}&quot;)&#10;        }&#10;    }&#10;&#10;    private suspend fun fetchAllRecordsFromServer(): List&lt;Product&gt; {&#10;        val retrofit = Retrofit.Builder()&#10;            .baseUrl(&quot;http://192.168.10.104:5000/&quot;)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;        val api = retrofit.create(ProductApiService::class.java)&#10;        return try {&#10;            val response = withContext(Dispatchers.IO) { api.getAllProducts() }&#10;            if (response.isSuccessful) {&#10;                response.body()?.map { product -&gt;&#10;                    Product(&#10;                        product_serial = product.product_serial,&#10;                        robot_serial = product.robot_serial,&#10;                        control_serial = product.control_serial,&#10;                        sales_id = product.sales_id,&#10;                        created_at = product.created_at,&#10;                        updated_at = product.updated_at,&#10;                        isLocalOnly = false&#10;                    )&#10;                } ?: emptyList()&#10;            } else {&#10;                Log.e(&quot;API&quot;, &quot;全レコード取得失敗: ${response.errorBody()?.string()}&quot;)&#10;                emptyList()&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;API&quot;, &quot;全レコード取得例外: ${e.message}&quot;)&#10;            emptyList()&#10;        }&#10;    }&#10;&#10;    private suspend fun refreshProductList() {&#10;        val db = Room.databaseBuilder(&#10;            applicationContext,&#10;            AppDatabase::class.java,&#10;            &quot;local_products&quot;&#10;        ).build()&#10;        val products = withContext(Dispatchers.IO) {&#10;            db.localProductDao().getAll()&#10;                .filter { it.updated_at != null } // 完成レコードのみ&#10;                .map { localProduct: LocalProduct -&gt; localProduct.toProduct() }&#10;        }&#10;        Log.d(&quot;UI&quot;, &quot;RecyclerView表示件数: ${products.size}&quot;)&#10;        currentProducts.clear()&#10;        currentProducts.addAll(products)&#10;        adapter.notifyDataSetChanged()&#10;    }&#10;&#10;    // LocalProduct拡張関数&#10;    private fun LocalProduct.toProduct(): Product {&#10;        return Product(&#10;            product_serial = this.product_serial,&#10;            robot_serial = this.robot_serial,&#10;            control_serial = this.control_serial,&#10;            sales_id = this.sales_id,&#10;            created_at = this.created_at,&#10;            updated_at = this.updated_at,&#10;            isLocalOnly = this.sync_status == 0&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.bundlemaker&#10;&#10;import android.app.AlertDialog&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.View&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.ImageButton&#10;import android.widget.ProgressBar&#10;import android.widget.Toast&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.ViewCompat&#10;import androidx.core.view.WindowInsetsCompat&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.recyclerview.widget.RecyclerView&#10;import androidx.room.Room&#10;import com.example.bundlemaker.ConfirmActivity&#10;import com.example.bundlemaker.adapter.ProductAdapter&#10;import com.example.bundlemaker.model.AppDatabase&#10;import com.example.bundlemaker.model.LocalProduct&#10;import com.example.bundlemaker.model.Product&#10;import com.example.bundlemaker.network.ProductApiService&#10;import com.example.bundlemaker.network.ProductRequest&#10;import com.example.bundlemaker.network.ProductResponse&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;&#10;class MainActivity : AppCompatActivity() {&#10;&#10;    private lateinit var productSerialSearchBtn: Button&#10;    private lateinit var robotSerialEnterBtn: Button&#10;    private lateinit var controllerSerialEnterBtn: Button&#10;    private lateinit var commitBtn: Button&#10;    private lateinit var syncBtn: ImageButton&#10;    private lateinit var confirmBtn: Button&#10;    private lateinit var recyclerView: RecyclerView&#10;    private lateinit var adapter: ProductAdapter&#10;&#10;    private var currentProducts: MutableList&lt;Product&gt; = mutableListOf()&#10;    private var selectedRowIndex: Int = -1&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContentView(R.layout.activity_main)&#10;&#10;        productSerialSearchBtn = findViewById(R.id.product_serial_search_button)&#10;        robotSerialEnterBtn = findViewById(R.id.robot_serial_enter_button)&#10;        controllerSerialEnterBtn = findViewById(R.id.controller_serial_enter_button)&#10;        commitBtn = findViewById(R.id.commit_button)&#10;        syncBtn = findViewById(R.id.sync_button)&#10;        confirmBtn = findViewById(R.id.confirm_button)&#10;        recyclerView = findViewById(R.id.product_table)&#10;&#10;        adapter = ProductAdapter(currentProducts)&#10;        recyclerView.adapter = adapter&#10;&#10;        // ボタン初期状態&#10;        updateButtonState()&#10;&#10;        // 製品シリアル検索&#10;        productSerialSearchBtn.setOnClickListener {&#10;            showInputDialog(&quot;製造番号を入力してください&quot;) { serial -&gt;&#10;                if (serial.isNotBlank()) {&#10;                    lifecycleScope.launch {&#10;                        val db = Room.databaseBuilder(&#10;                            applicationContext,&#10;                            AppDatabase::class.java,&#10;                            &quot;local_products&quot;&#10;                        ).build()&#10;                        val localProduct = withContext(Dispatchers.IO) {&#10;                            db.localProductDao().getProductBySerial(serial)&#10;                        }&#10;                        val product = localProduct?.let { it.toProduct() } ?: Product(product_serial = serial)&#10;                        if (localProduct != null) {&#10;                            selectedRowIndex = currentProducts.indexOfFirst { p -&gt; p.product_serial == serial }&#10;                            if (selectedRowIndex == -1) {&#10;                                currentProducts.add(product)&#10;                                selectedRowIndex = currentProducts.size - 1&#10;                            }&#10;                            adapter.selectedPosition = selectedRowIndex&#10;                            adapter.notifyItemChanged(selectedRowIndex)&#10;                            Toast.makeText(this@MainActivity, &quot;製造番号が見つかりました&quot;, Toast.LENGTH_SHORT).show()&#10;                        } else {&#10;                            currentProducts.add(product)&#10;                            selectedRowIndex = currentProducts.size - 1&#10;                            adapter.selectedPosition = selectedRowIndex&#10;                            adapter.notifyItemInserted(selectedRowIndex)&#10;                            Toast.makeText(this@MainActivity, &quot;新規製造番号を追加しました&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                        updateButtonState()&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        robotSerialEnterBtn.setOnClickListener {&#10;            if (selectedRowIndex &gt;= 0) {&#10;                showInputDialog(&quot;ロボットシリアル番号を入力してください&quot;) { robotSerial -&gt;&#10;                    if (robotSerial.isNotBlank()) {&#10;                        val product = currentProducts[selectedRowIndex]&#10;                        product.robot_serial = robotSerial&#10;                        adapter.notifyItemChanged(selectedRowIndex)&#10;                        lifecycleScope.launch {&#10;                            val db = Room.databaseBuilder(&#10;                                applicationContext,&#10;                                AppDatabase::class.java,&#10;                                &quot;local_products&quot;&#10;                            ).build()&#10;                            withContext(Dispatchers.IO) {&#10;                                val localProduct = db.localProductDao().getProductBySerial(product.product_serial) ?: LocalProduct(&#10;                                    product_serial = product.product_serial,&#10;                                    robot_serial = robotSerial,&#10;                                    created_at = System.currentTimeMillis(),&#10;                                    updated_at = System.currentTimeMillis()&#10;                                )&#10;                                db.localProductDao().insert(localProduct)&#10;                            }&#10;                        }&#10;                        updateButtonState()&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        controllerSerialEnterBtn.setOnClickListener {&#10;            if (selectedRowIndex &gt;= 0) {&#10;                showInputDialog(&quot;コントローラシリアル番号を入力してください&quot;) { controlSerial -&gt;&#10;                    if (controlSerial.isNotBlank()) {&#10;                        val product = currentProducts[selectedRowIndex]&#10;                        product.control_serial = controlSerial&#10;                        adapter.notifyItemChanged(selectedRowIndex)&#10;                        lifecycleScope.launch {&#10;                            val db = Room.databaseBuilder(&#10;                                applicationContext,&#10;                                AppDatabase::class.java,&#10;                                &quot;local_products&quot;&#10;                            ).build()&#10;                            withContext(Dispatchers.IO) {&#10;                                val localProduct = db.localProductDao().getProductBySerial(product.product_serial) ?: LocalProduct(&#10;                                    product_serial = product.product_serial,&#10;                                    control_serial = controlSerial,&#10;                                    created_at = System.currentTimeMillis(),&#10;                                    updated_at = System.currentTimeMillis()&#10;                                )&#10;                                db.localProductDao().insert(localProduct)&#10;                            }&#10;                        }&#10;                        updateButtonState()&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        commitBtn.setOnClickListener {&#10;            if (selectedRowIndex &gt;= 0) {&#10;                val product = currentProducts[selectedRowIndex]&#10;                if (product.product_serial.isNotBlank() &amp;&amp;&#10;                    !product.robot_serial.isNullOrBlank() &amp;&amp;&#10;                    !product.control_serial.isNullOrBlank()&#10;                ) {&#10;                    product.updated_at = System.currentTimeMillis()&#10;                    adapter.notifyItemChanged(selectedRowIndex)&#10;                    lifecycleScope.launch {&#10;                        val db = Room.databaseBuilder(&#10;                            applicationContext,&#10;                            AppDatabase::class.java,&#10;                            &quot;local_products&quot;&#10;                        ).build()&#10;                        withContext(Dispatchers.IO) {&#10;                            val localProduct = LocalProduct(&#10;                                product_serial = product.product_serial,&#10;                                robot_serial = product.robot_serial ?: &quot;&quot;,&#10;                                control_serial = product.control_serial ?: &quot;&quot;,&#10;                                created_at = System.currentTimeMillis(),&#10;                                updated_at = System.currentTimeMillis(),&#10;                                sync_status = 1 // Mark as completed&#10;                            )&#10;                            db.localProductDao().insert(localProduct)&#10;                        }&#10;                    }&#10;                    Toast.makeText(this, &quot;レコードを確定しました&quot;, Toast.LENGTH_SHORT).show()&#10;                    // 新しい行の準備&#10;                    selectedRowIndex = -1&#10;                    adapter.selectedPosition = -1&#10;                    updateButtonState()&#10;                }&#10;            }&#10;        }&#10;&#10;        // 同期ボタン&#10;        syncBtn.isEnabled = true&#10;        confirmBtn.isEnabled = true&#10;&#10;        syncBtn.setOnClickListener {&#10;            lifecycleScope.launch {&#10;                sendCompletedRecordsToServer()&#10;                fetchIncompleteRecordsFromServer()&#10;                refreshProductList() // ←同期後に最新データを表示&#10;            }&#10;        }&#10;&#10;        confirmBtn.setOnClickListener {&#10;            lifecycleScope.launch {&#10;                val products = fetchAllRecordsFromServer()&#10;                // RecyclerViewにも表示（ConfirmActivityへ渡すだけでなく、画面にも反映したい場合）&#10;                currentProducts.clear()&#10;                currentProducts.addAll(products)&#10;                adapter.notifyDataSetChanged()&#10;                // ConfirmActivityへ遷移&#10;                val intent = Intent(this@MainActivity, ConfirmActivity::class.java)&#10;                intent.putExtra(&quot;products&quot;, ArrayList(products))&#10;                startActivity(intent)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun updateButtonState() {&#10;        productSerialSearchBtn.isEnabled = true&#10;        robotSerialEnterBtn.isEnabled = selectedRowIndex &gt;= 0 &amp;&amp; currentProducts[selectedRowIndex].product_serial.isNotBlank()&#10;        controllerSerialEnterBtn.isEnabled = selectedRowIndex &gt;= 0 &amp;&amp; !currentProducts[selectedRowIndex].robot_serial.isNullOrBlank()&#10;        commitBtn.isEnabled = selectedRowIndex &gt;= 0 &amp;&amp;&#10;                !currentProducts[selectedRowIndex].product_serial.isNullOrBlank() &amp;&amp;&#10;                !currentProducts[selectedRowIndex].robot_serial.isNullOrBlank() &amp;&amp;&#10;                !currentProducts[selectedRowIndex].control_serial.isNullOrBlank()&#10;    }&#10;&#10;    private fun showInputDialog(title: String, callback: (String) -&gt; Unit) {&#10;        val editText = EditText(this)&#10;        val dialog = android.app.AlertDialog.Builder(this)&#10;            .setTitle(title)&#10;            .setView(editText)&#10;            .setPositiveButton(&quot;OK&quot;) { _, _ -&gt;&#10;                callback(editText.text.toString())&#10;            }&#10;            .setNegativeButton(&quot;キャンセル&quot;, null)&#10;            .create()&#10;        dialog.show()&#10;    }&#10;&#10;    private suspend fun sendCompletedRecordsToServer() {&#10;        val db = Room.databaseBuilder(&#10;            applicationContext,&#10;            AppDatabase::class.java,&#10;            &quot;local_products&quot;&#10;        ).build()&#10;        val completed = withContext(Dispatchers.IO) {&#10;            db.localProductDao().getPending()&#10;                .filter {&#10;                    it.product_serial.isNotBlank() &amp;&amp;&#10;                    !it.robot_serial.isNullOrBlank() &amp;&amp;&#10;                    !it.control_serial.isNullOrBlank()&#10;                }&#10;        }&#10;        val retrofit = Retrofit.Builder()&#10;            .baseUrl(&quot;http://192.168.10.104:5000/&quot;)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;        val api = retrofit.create(ProductApiService::class.java)&#10;&#10;        for (localProduct in completed) {&#10;            try {&#10;                val request = ProductRequest(&#10;                    product_serial = localProduct.product_serial,&#10;                    robot_serial = localProduct.robot_serial,&#10;                    control_serial = localProduct.control_serial&#10;                )&#10;                Log.d(&quot;API&quot;, &quot;送信データ: $request&quot;)&#10;                val response = withContext(Dispatchers.IO) {&#10;                    try {&#10;                        api.postProduct(request)&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;API&quot;, &quot;API呼び出しエラー: ${e.message}&quot;)&#10;                        null&#10;                    }&#10;                }&#10;                response?.let { res -&gt;&#10;                    if (res.isSuccessful) {&#10;                        withContext(Dispatchers.IO) {&#10;                            db.localProductDao().updateSyncStatus(localProduct.product_serial, 1)&#10;                        }&#10;                    } else {&#10;                        val errorBody = res.errorBody()?.string()&#10;                        Log.e(&quot;API&quot;, &quot;送信失敗: $errorBody&quot;)&#10;                    }&#10;                } ?: run {&#10;                    Log.e(&quot;API&quot;, &quot;API呼び出しに失敗しました&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;API&quot;, &quot;送信例外: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    private suspend fun fetchIncompleteRecordsFromServer() {&#10;        val retrofit = Retrofit.Builder()&#10;            .baseUrl(&quot;http://192.168.10.104:5000/&quot;)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;        val api = retrofit.create(ProductApiService::class.java)&#10;        try {&#10;            val response = withContext(Dispatchers.IO) { api.getIncompleteProducts() }&#10;            if (response.isSuccessful) {&#10;                val incompleteList = response.body() ?: emptyList()&#10;                val db = Room.databaseBuilder(&#10;                    applicationContext,&#10;                    AppDatabase::class.java,&#10;                    &quot;local_products&quot;&#10;                ).build()&#10;                withContext(Dispatchers.IO) {&#10;                    for (prod in incompleteList) {&#10;                        db.localProductDao().insert(&#10;                            LocalProduct(&#10;                                product_serial = prod.product_serial,&#10;                                robot_serial = prod.robot_serial,&#10;                                control_serial = prod.control_serial,&#10;                                sales_id = prod.sales_id,&#10;                                created_at = prod.created_at ?: System.currentTimeMillis(),&#10;                                updated_at = prod.updated_at,&#10;                                sync_status = 0&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;                // 未完成レコード取得後にリスト更新&#10;                refreshProductList()&#10;            } else {&#10;                Log.e(&quot;API&quot;, &quot;未完成レコード取得失敗: ${response.errorBody()?.string()}&quot;)&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;API&quot;, &quot;未完成レコード取得例外: ${e.message}&quot;)&#10;        }&#10;    }&#10;&#10;    private suspend fun fetchAllRecordsFromServer(): List&lt;Product&gt; {&#10;        val retrofit = Retrofit.Builder()&#10;            .baseUrl(&quot;http://192.168.10.104:5000/&quot;)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;        val api = retrofit.create(ProductApiService::class.java)&#10;        return try {&#10;            val response = withContext(Dispatchers.IO) { api.getAllProducts() }&#10;            if (response.isSuccessful) {&#10;                response.body()?.map { product -&gt;&#10;                    Product(&#10;                        product_serial = product.product_serial,&#10;                        robot_serial = product.robot_serial,&#10;                        control_serial = product.control_serial,&#10;                        sales_id = product.sales_id,&#10;                        created_at = product.created_at,&#10;                        updated_at = product.updated_at,&#10;                        isLocalOnly = false&#10;                    )&#10;                } ?: emptyList()&#10;            } else {&#10;                Log.e(&quot;API&quot;, &quot;全レコード取得失敗: ${response.errorBody()?.string()}&quot;)&#10;                emptyList()&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;API&quot;, &quot;全レコード取得例外: ${e.message}&quot;)&#10;            emptyList()&#10;        }&#10;    }&#10;&#10;    private suspend fun refreshProductList() {&#10;        val db = Room.databaseBuilder(&#10;            applicationContext,&#10;            AppDatabase::class.java,&#10;            &quot;local_products&quot;&#10;        ).build()&#10;        val allProducts = withContext(Dispatchers.IO) {&#10;            db.localProductDao().getAll().map { it.toProduct() }&#10;        }&#10;        // 完成レコードのみ抽出&#10;        val completedProducts = allProducts.filter { it.updated_at != null }&#10;        if (completedProducts.isNotEmpty()) {&#10;            currentProducts.clear()&#10;            currentProducts.addAll(completedProducts)&#10;        } else {&#10;            // 完成レコードがなければ未完成レコードも表示&#10;            val incompleteProducts = allProducts.filter { it.updated_at == null }&#10;            currentProducts.clear()&#10;            currentProducts.addAll(incompleteProducts)&#10;        }&#10;        Log.d(&quot;UI&quot;, &quot;RecyclerView表示件数: ${currentProducts.size}&quot;)&#10;        adapter.notifyDataSetChanged()&#10;    }&#10;&#10;    // LocalProduct拡張関数&#10;    private fun LocalProduct.toProduct(): Product {&#10;        return Product(&#10;            product_serial = this.product_serial,&#10;            robot_serial = this.robot_serial,&#10;            control_serial = this.control_serial,&#10;            sales_id = this.sales_id,&#10;            created_at = this.created_at,&#10;            updated_at = this.updated_at,&#10;            isLocalOnly = this.sync_status == 0&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/bundlemaker/QRScanActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/bundlemaker/QRScanActivity.kt" />
              <option name="originalContent" value="package com.example.bundlemaker&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.google.zxing.integration.android.IntentIntegrator&#10;&#10;class QRScanActivity : AppCompatActivity() {&#10;    private lateinit var resultText: TextView&#10;    private lateinit var manualInput: EditText&#10;    private lateinit var okButton: Button&#10;    private lateinit var cancelButton: Button&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_qr_scan)&#10;&#10;        resultText = findViewById(R.id.scan_result_text)&#10;        manualInput = findViewById(R.id.manual_input)&#10;        okButton = findViewById(R.id.ok_button)&#10;        cancelButton = findViewById(R.id.cancel_button)&#10;&#10;        // QRスキャン開始&#10;        IntentIntegrator(this).initiateScan()&#10;&#10;        okButton.setOnClickListener {&#10;            val result = manualInput.text.toString().ifBlank { resultText.text.toString() }&#10;            val intent = Intent().apply {&#10;                putExtra(&quot;scan_result&quot;, result)&#10;                putExtra(&quot;success&quot;, result.isNotBlank())&#10;            }&#10;            setResult(Activity.RESULT_OK, intent)&#10;            finish()&#10;        }&#10;        cancelButton.setOnClickListener {&#10;            setResult(Activity.RESULT_CANCELED)&#10;            finish()&#10;        }&#10;    }&#10;&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        val result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data)&#10;        if (result != null) {&#10;            if (result.contents != null) {&#10;                resultText.text = result.contents&#10;                manualInput.setText(&quot;&quot;)&#10;            } else {&#10;                resultText.text = &quot;QRコードを読み取れませんでした。手動で入力してください。&quot;&#10;            }&#10;        } else {&#10;            super.onActivityResult(requestCode, resultCode, data)&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.bundlemaker&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.google.zxing.integration.android.IntentIntegrator&#10;&#10;class QRScanActivity : AppCompatActivity() {&#10;    private lateinit var resultText: TextView&#10;    private lateinit var manualInput: EditText&#10;    private lateinit var okButton: Button&#10;    private lateinit var cancelButton: Button&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_qr_scan)&#10;&#10;        resultText = findViewById(R.id.scan_result_text)&#10;        manualInput = findViewById(R.id.manual_input)&#10;        okButton = findViewById(R.id.ok_button)&#10;        cancelButton = findViewById(R.id.cancel_button)&#10;&#10;        // QRスキャン開始&#10;        IntentIntegrator(this).initiateScan()&#10;&#10;        okButton.setOnClickListener {&#10;            val result = manualInput.text.toString().ifBlank { resultText.text.toString() }&#10;            val intent = Intent().apply {&#10;                putExtra(&quot;scan_result&quot;, result)&#10;                putExtra(&quot;success&quot;, result.isNotBlank())&#10;            }&#10;            setResult(Activity.RESULT_OK, intent)&#10;            finish()&#10;        }&#10;        cancelButton.setOnClickListener {&#10;            setResult(Activity.RESULT_CANCELED)&#10;            finish()&#10;        }&#10;    }&#10;&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        val result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data)&#10;        if (result != null) {&#10;            if (result.contents != null) {&#10;                resultText.text = result.contents&#10;                manualInput.setText(&quot;&quot;)&#10;            } else {&#10;                resultText.text = &quot;QRコードを読み取れませんでした。手動で入力してください。&quot;&#10;            }&#10;        } else {&#10;            super.onActivityResult(requestCode, resultCode, data)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_confirm.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_confirm.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;!-- タイトル --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/confirm_title&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;確認画面&quot;&#10;        android:textSize=&quot;18sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:paddingBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;!-- レコード一覧表示 --&gt;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/confirm_product_list&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:paddingBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;!-- ボタン群 --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center&quot;&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/confirm_register_button&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;登録&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/confirm_modify_button&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;修正&quot;&#10;            android:layout_marginStart=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/confirm_cancel_button&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;キャンセル&quot;&#10;            android:layout_marginStart=&quot;16dp&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;!-- タイトル --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/confirm_title&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;@string/confirm_title&quot;&#10;        android:textSize=&quot;18sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:paddingBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;!-- レコード一覧表示 --&gt;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/confirm_product_list&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:paddingBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;!-- ボタン群 --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center&quot;&#10;        style=&quot;?android:attr/buttonBarStyle&quot;&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/confirm_register_button&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/confirm_register&quot;&#10;            style=&quot;?android:attr/buttonBarButtonStyle&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/confirm_modify_button&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/confirm_modify&quot;&#10;            style=&quot;?android:attr/buttonBarButtonStyle&quot;&#10;            android:layout_marginStart=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/confirm_cancel_button&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/confirm_cancel&quot;&#10;            style=&quot;?android:attr/buttonBarButtonStyle&quot;&#10;            android:layout_marginStart=&quot;16dp&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;!-- タイトル --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/title_text&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:text=&quot;BundleMaker β版&quot;&#10;        android:textSize=&quot;18sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        app:layout_constraintEnd_toStartOf=&quot;@+id/sync_button&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;!-- ボタン群（水平3分割） --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/button_group&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/title_text&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/product_serial_search_button&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;①製品シリアル検索&quot;/&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/robot_serial_enter_button&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;②ロボット番号&quot;/&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/controller_serial_enter_button&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;③コントローラ番号&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- テーブルヘッダー --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/product_table_header&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:background=&quot;?attr/colorPrimaryVariant&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/button_group&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/header_product_serial&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;製造No.&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;10sp&quot;/&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/header_robot_serial&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;ロボNo.&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;10sp&quot;/&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/header_control_serial&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;コンNo.&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;10sp&quot;/&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/header_sales_id&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;商談No.&quot;&#10;            android:visibility=&quot;gone&quot;/&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/header_created_at&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;発番時刻&quot;&#10;            android:visibility=&quot;gone&quot;/&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/header_updated_at&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;採番時刻&quot;&#10;            android:visibility=&quot;gone&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- データ表示エリア --&gt;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/product_table&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/product_table_header&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@id/commit_button&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;/&gt;&#10;&#10;    &lt;!-- 右下：確定ボタン --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/commit_button&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;確定&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:layout_margin=&quot;16dp&quot;/&gt;&#10;&#10;    &lt;!-- 右上：同期ボタン（リフレッシュアイコンに変更） --&gt;&#10;    &lt;ImageButton&#10;        android:id=&quot;@+id/sync_button&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        android:contentDescription=&quot;同期&quot;&#10;        android:src=&quot;@android:drawable/ic_popup_sync&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;!-- 左上：確認ボタン --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/confirm_button&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;確認&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        android:layout_marginStart=&quot;16dp&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;!-- タイトル --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/title_text&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:text=&quot;BundleMaker β版&quot;&#10;        android:textSize=&quot;18sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toStartOf=&quot;@id/sync_button&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        android:layout_marginEnd=&quot;8dp&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;/&gt;&#10;&#10;    &lt;!-- 右上：同期ボタン（ImageButton推奨） --&gt;&#10;    &lt;ImageButton&#10;        android:id=&quot;@+id/sync_button&quot;&#10;        android:layout_width=&quot;48dp&quot;&#10;        android:layout_height=&quot;48dp&quot;&#10;        android:layout_marginEnd=&quot;16dp&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:contentDescription=&quot;同期&quot;&#10;        android:src=&quot;@android:drawable/ic_popup_sync&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;/&gt;&#10;&#10;    &lt;!-- ボタン群（水平3分割） --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/button_group&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/title_text&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/product_serial_search_button&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;①製品シリアル検索&quot;/&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/robot_serial_enter_button&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;②ロボット番号&quot;/&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/controller_serial_enter_button&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;③コントローラ番号&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- テーブルヘッダー --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/product_table_header&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:background=&quot;?attr/colorPrimaryVariant&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/button_group&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/header_product_serial&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;製造No.&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;10sp&quot;/&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/header_robot_serial&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;ロボNo.&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;10sp&quot;/&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/header_control_serial&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;コンNo.&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;10sp&quot;/&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/header_sales_id&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;商談No.&quot;&#10;            android:visibility=&quot;gone&quot;/&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/header_created_at&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;発番時刻&quot;&#10;            android:visibility=&quot;gone&quot;/&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/header_updated_at&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;採番時刻&quot;&#10;            android:visibility=&quot;gone&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- データ表示エリア --&gt;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/product_table&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/product_table_header&quot;&#10;        app:layout_constraintBottom_toTopOf=&quot;@id/commit_button&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;    &lt;!-- 右下：確定ボタン --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/commit_button&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;確定&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        android:layout_marginEnd=&quot;16dp&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;    &lt;!-- 左下：確認ボタン --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/confirm_button&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;確認&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        android:layout_marginStart=&quot;16dp&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;BundleMaker&lt;/string&gt;&#10;    &lt;string name=&quot;accessibility_product_list&quot;&gt;製品一覧&lt;/string&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources&gt;&#13;&#10;    &lt;string name=&quot;app_name&quot;&gt;BundleMaker&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;accessibility_product_list&quot;&gt;製品一覧&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;confirm_title&quot;&gt;確認画面&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;confirm_register&quot;&gt;登録&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;confirm_modify&quot;&gt;修正&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;confirm_cancel&quot;&gt;キャンセル&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;product_serial&quot;&gt;製造No.&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;robot_serial&quot;&gt;ロボNo.&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;control_serial&quot;&gt;コンNo.&lt;/string&gt;&#13;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>